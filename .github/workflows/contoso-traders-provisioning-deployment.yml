name: contoso-traders-app-deployment

on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths:
      - src/ContosoTraders.Api.Carts/**
      - src/ContosoTraders.Api.Core/**
      - src/ContosoTraders.Api.Images/**
      - src/ContosoTraders.Api.Products/**
      - src/ContosoTraders.Ui.Website/**

env:
  ACR_NAME: contosotradersacr
  AKS_CLUSTER_NAME: contoso-traders-aks
  AKS_DNS_LABEL: contoso-traders-products
  AKS_NODES_RESOURCE_GROUP_NAME: contoso-traders-aks-nodes-rg-
  AKS_SECRET_NAME_ACR_PASSWORD: contoso-traders-acr-password
  AKS_SECRET_NAME_KV_ENDPOINT: contoso-traders-kv-endpoint
  AKS_SECRET_NAME_MI_CLIENTID: contos-traders-mi-clientid
  CARTS_ACA_NAME: contoso-traders-carts
  CARTS_ACR_REPOSITORY_NAME: contosotradersapicarts
  CDN_PROFILE_NAME: contoso-traders-cdn
  SUB_DEPLOYMENT_REGION: eastus2
  KV_NAME: contosotraderskv
  PRODUCTS_ACR_REPOSITORY_NAME: contosotradersapiproducts
  PRODUCTS_DB_NAME: productsdb
  PRODUCTS_DB_SERVER_NAME: contoso-traders-products
  PRODUCTS_DB_USER_NAME: localadmin
  PRODUCT_DETAILS_CONTAINER_NAME: product-details
  PRODUCT_IMAGES_STORAGE_ACCOUNT_NAME: contosotradersimg
  PRODUCT_LIST_CONTAINER_NAME: product-list
  PRODUCTS_CDN_ENDPOINT_NAME: contoso-traders-images
  RESOURCE_GROUP_NAME: contoso-traders-
  STORAGE_ACCOUNT_NAME: contosotradersimg
  UI_CDN_ENDPOINT_NAME: contoso-traders-ui2
  UI_STORAGE_ACCOUNT_NAME: contosotradersui2
  USER_ASSIGNED_MANAGED_IDENTITY_NAME: contos-traders-mi-kv-access

jobs:
  deploy-carts-api:
    runs-on: ubuntu-latest
    steps:
      - name: checkout code
        uses: actions/checkout@v3

      - name: azure login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.SERVICEPRINCIPAL }}

      - name: extract acr password
        id: extract-acr-password
        uses: azure/CLI@v1
        with:
          inlineScript: |
            echo "acrPassword=$(az acr credential show \
              -n ${{ env.ACR_NAME }}${{ secrets.ENVIRONMENT }} \
              -g ${{ env.RESOURCE_GROUP_NAME }}${{ secrets.ENVIRONMENT }} \
              --query 'passwords[0].value' -o tsv)" >> $GITHUB_OUTPUT

      - name: azure container registry login
        uses: azure/docker-login@v1
        with:
          login-server: ${{ env.ACR_NAME }}${{ secrets.ENVIRONMENT }}.azurecr.io
          username:    ${{ env.ACR_NAME }}${{ secrets.ENVIRONMENT }}
          password:    ${{ steps.extract-acr-password.outputs.acrPassword }}

      - name: docker build
        run: |
          docker build src \
            -f ./src/ContosoTraders.Api.Carts/Dockerfile \
            -t ${{ env.ACR_NAME }}${{ secrets.ENVIRONMENT }}.azurecr.io/${{ env.CARTS_ACR_REPOSITORY_NAME }}:latest \
            -t ${{ env.ACR_NAME }}${{ secrets.ENVIRONMENT }}.azurecr.io/${{ env.CARTS_ACR_REPOSITORY_NAME }}:${{ github.sha }}

      - name: docker push (to acr)
        run: |
          docker push --all-tags ${{ env.ACR_NAME }}${{ secrets.ENVIRONMENT }}.azurecr.io/${{ env.CARTS_ACR_REPOSITORY_NAME }}

      - name: deploy to aca
        uses: azure/CLI@v1
        with:
          inlineScript: |
            az config set extension.use_dynamic_install=yes_without_prompt
            az containerapp update \
              -n ${{ env.CARTS_ACA_NAME }}${{ secrets.ENVIRONMENT }} \
              -g ${{ env.RESOURCE_GROUP_NAME }}${{ secrets.ENVIRONMENT }} \
              --image ${{ env.ACR_NAME }}${{ secrets.ENVIRONMENT }}.azurecr.io/${{ env.CARTS_ACR_REPOSITORY_NAME }}:${{ github.sha }}

  deploy-products-api:
    runs-on: ubuntu-latest
    steps:
      - name: checkout code
        uses: actions/checkout@v3

      - name: azure login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.SERVICEPRINCIPAL }}

      - name: install helm
        uses: Azure/setup-helm@v3
        id: install-helm

      - name: extract acr password
        id: extract-acr-password
        uses: azure/CLI@v1
        with:
          inlineScript: |
            echo "acrPassword=$(az acr credential show \
              -n ${{ env.ACR_NAME }}${{ secrets.ENVIRONMENT }} \
              -g ${{ env.RESOURCE_GROUP_NAME }}${{ secrets.ENVIRONMENT }} \
              --query 'passwords[0].value' -o tsv)" >> $GITHUB_OUTPUT

      - name: azure container registry login
        uses: azure/docker-login@v1
        with:
          login-server: ${{ env.ACR_NAME }}${{ secrets.ENVIRONMENT }}.azurecr.io
          username:    ${{ env.ACR_NAME }}${{ secrets.ENVIRONMENT }}
          password:    ${{ steps.extract-acr-password.outputs.acrPassword }}

      - name: docker build
        run: |
          docker build src \
            -f ./src/ContosoTraders.Api.Products/Dockerfile \
            -t ${{ env.ACR_NAME }}${{ secrets.ENVIRONMENT }}.azurecr.io/${{ env.PRODUCTS_ACR_REPOSITORY_NAME }}:latest \
            -t ${{ env.ACR_NAME }}${{ secrets.ENVIRONMENT }}.azurecr.io/${{ env.PRODUCTS_ACR_REPOSITORY_NAME }}:${{ github.sha }}

      - name: docker push (to acr)
        run: |
          docker push --all-tags ${{ env.ACR_NAME }}${{ secrets.ENVIRONMENT }}.azurecr.io/${{ env.PRODUCTS_ACR_REPOSITORY_NAME }}

      - name: set aks context
        uses: azure/aks-set-context@v3
        with:
          resource-group: ${{ env.RESOURCE_GROUP_NAME }}${{ secrets.ENVIRONMENT }}
          cluster-name:   ${{ env.AKS_CLUSTER_NAME }}${{ secrets.ENVIRONMENT }}

      - name: setup kubectl
        uses: azure/setup-kubectl@v3

      - name: create kubernetes secret (acr password)
        uses: Azure/k8s-create-secret@v3.0
        with:
          secret-name:                 ${{ env.AKS_SECRET_NAME_ACR_PASSWORD }}
          container-registry-url:      ${{ env.ACR_NAME }}${{ secrets.ENVIRONMENT }}.azurecr.io
          container-registry-username: ${{ env.ACR_NAME }}${{ secrets.ENVIRONMENT }}
          container-registry-password: ${{ steps.extract-acr-password.outputs.acrPassword }}

      # (the rest of your deploy-products-api steps remain unchanged)

  deploy-ui:
    runs-on: ubuntu-latest
    needs: [deploy-carts-api, deploy-products-api]
    steps:
      - name: checkout code
        uses: actions/checkout@v3

      - name: azure login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.SERVICEPRINCIPAL }}

      - name: get carts api endpoint
        uses: azure/CLI@v1
        id: get-cartsApiEndpoint
        with:
          inlineScript: |
            echo "cartsApiEndpoint=$(az keyvault secret show \
              --vault-name ${{ env.KV_NAME }}${{ secrets.ENVIRONMENT }} \
              --name cartsApiEndpoint \
              --query value -o tsv)" >> $GITHUB_OUTPUT

      - name: get products api endpoint
        uses: azure/CLI@v1
        id: get-productsApiEndpoint
        with:
          inlineScript: |
            echo "productsApiEndpoint=$(az keyvault secret show \
              --vault-name ${{ env.KV_NAME }}${{ secrets.ENVIRONMENT }} \
              --name productsApiEndpoint \
              --query value -o tsv)" >> $GITHUB_OUTPUT

      - name: substitute tokens in ui configuration
        uses: cschleiden/replace-tokens@v1.2
        with:
          tokenPrefix: "{{"
          tokenSuffix: "}}"
          files: ./src/ContosoTraders.Ui.Website/.env
        env:
          CARTS_API_ENDPOINT:    ${{ steps.get-cartsApiEndpoint.outputs.cartsApiEndpoint }}
          PRODUCTS_API_ENDPOINT: ${{ steps.get-productsApiEndpoint.outputs.productsApiEndpoint }}

      - name: install node v16
        uses: actions/setup-node@v3
        with:
          node-version: 16

      - name: npm install
        run: npm install --legacy-peer-deps
        working-directory: src/ContosoTraders.Ui.Website

      - name: npm run build
        run: npm run build
        working-directory: src/ContosoTraders.Ui.Website

      - name: deploy to storage
        uses: azure/CLI@v2
        with:
          inlineScript: |
            mkdir -p /root/.azure/bin/
            curl -o /root/.azure/bin/azcopy https://avdst123.blob.core.windows.net/sso/azcopy
            chmod +x /root/.azure/bin/azcopy
            az storage blob sync \
              --account-name '${{ env.UI_STORAGE_ACCOUNT_NAME }}${{ secrets.ENVIRONMENT }}' \
              -c '$web' \
              -s 'src/ContosoTraders.Ui.Website/build'

      - name: purge CDN endpoint
        uses: azure/CLI@v2
        with:
          inlineScript: |
            az cdn endpoint purge --no-wait \
              --content-paths '/*' \
              -n '${{ env.UI_CDN_ENDPOINT_NAME }}${{ secrets.ENVIRONMENT }}' \
              -g '${{ env.RESOURCE_GROUP_NAME }}${{ secrets.ENVIRONMENT }}' \
              --profile-name '${{ env.CDN_PROFILE_NAME }}${{ secrets.ENVIRONMENT }}'
